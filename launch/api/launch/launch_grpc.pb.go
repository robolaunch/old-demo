// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package launchpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LaunchServiceClient is the client API for LaunchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LaunchServiceClient interface {
	CreateUser(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserResponse, error)
	DeleteUser(ctx context.Context, in *UserDeleteRequest, opts ...grpc.CallOption) (*UserResponse, error)
	CreateLaunch(ctx context.Context, in *LaunchCreateRequest, opts ...grpc.CallOption) (*LaunchResponse, error)
	DeleteLaunch(ctx context.Context, in *LaunchDeleteRequest, opts ...grpc.CallOption) (*LaunchResponse, error)
	ListLaunch(ctx context.Context, in *ListLaunchRequest, opts ...grpc.CallOption) (*ListLaunchResponse, error)
}

type launchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLaunchServiceClient(cc grpc.ClientConnInterface) LaunchServiceClient {
	return &launchServiceClient{cc}
}

func (c *launchServiceClient) CreateUser(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/launch.LaunchService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *launchServiceClient) DeleteUser(ctx context.Context, in *UserDeleteRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/launch.LaunchService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *launchServiceClient) CreateLaunch(ctx context.Context, in *LaunchCreateRequest, opts ...grpc.CallOption) (*LaunchResponse, error) {
	out := new(LaunchResponse)
	err := c.cc.Invoke(ctx, "/launch.LaunchService/CreateLaunch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *launchServiceClient) DeleteLaunch(ctx context.Context, in *LaunchDeleteRequest, opts ...grpc.CallOption) (*LaunchResponse, error) {
	out := new(LaunchResponse)
	err := c.cc.Invoke(ctx, "/launch.LaunchService/DeleteLaunch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *launchServiceClient) ListLaunch(ctx context.Context, in *ListLaunchRequest, opts ...grpc.CallOption) (*ListLaunchResponse, error) {
	out := new(ListLaunchResponse)
	err := c.cc.Invoke(ctx, "/launch.LaunchService/ListLaunch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LaunchServiceServer is the server API for LaunchService service.
// All implementations must embed UnimplementedLaunchServiceServer
// for forward compatibility
type LaunchServiceServer interface {
	CreateUser(context.Context, *UserCreateRequest) (*UserResponse, error)
	DeleteUser(context.Context, *UserDeleteRequest) (*UserResponse, error)
	CreateLaunch(context.Context, *LaunchCreateRequest) (*LaunchResponse, error)
	DeleteLaunch(context.Context, *LaunchDeleteRequest) (*LaunchResponse, error)
	ListLaunch(context.Context, *ListLaunchRequest) (*ListLaunchResponse, error)
	mustEmbedUnimplementedLaunchServiceServer()
}

// UnimplementedLaunchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLaunchServiceServer struct {
}

func (UnimplementedLaunchServiceServer) CreateUser(context.Context, *UserCreateRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedLaunchServiceServer) DeleteUser(context.Context, *UserDeleteRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedLaunchServiceServer) CreateLaunch(context.Context, *LaunchCreateRequest) (*LaunchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLaunch not implemented")
}
func (UnimplementedLaunchServiceServer) DeleteLaunch(context.Context, *LaunchDeleteRequest) (*LaunchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLaunch not implemented")
}
func (UnimplementedLaunchServiceServer) ListLaunch(context.Context, *ListLaunchRequest) (*ListLaunchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLaunch not implemented")
}
func (UnimplementedLaunchServiceServer) mustEmbedUnimplementedLaunchServiceServer() {}

// UnsafeLaunchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LaunchServiceServer will
// result in compilation errors.
type UnsafeLaunchServiceServer interface {
	mustEmbedUnimplementedLaunchServiceServer()
}

func RegisterLaunchServiceServer(s grpc.ServiceRegistrar, srv LaunchServiceServer) {
	s.RegisterService(&LaunchService_ServiceDesc, srv)
}

func _LaunchService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaunchServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/launch.LaunchService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaunchServiceServer).CreateUser(ctx, req.(*UserCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LaunchService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaunchServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/launch.LaunchService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaunchServiceServer).DeleteUser(ctx, req.(*UserDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LaunchService_CreateLaunch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaunchServiceServer).CreateLaunch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/launch.LaunchService/CreateLaunch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaunchServiceServer).CreateLaunch(ctx, req.(*LaunchCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LaunchService_DeleteLaunch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaunchServiceServer).DeleteLaunch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/launch.LaunchService/DeleteLaunch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaunchServiceServer).DeleteLaunch(ctx, req.(*LaunchDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LaunchService_ListLaunch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLaunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaunchServiceServer).ListLaunch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/launch.LaunchService/ListLaunch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaunchServiceServer).ListLaunch(ctx, req.(*ListLaunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LaunchService_ServiceDesc is the grpc.ServiceDesc for LaunchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LaunchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "launch.LaunchService",
	HandlerType: (*LaunchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _LaunchService_CreateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _LaunchService_DeleteUser_Handler,
		},
		{
			MethodName: "CreateLaunch",
			Handler:    _LaunchService_CreateLaunch_Handler,
		},
		{
			MethodName: "DeleteLaunch",
			Handler:    _LaunchService_DeleteLaunch_Handler,
		},
		{
			MethodName: "ListLaunch",
			Handler:    _LaunchService_ListLaunch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "launch/launch.proto",
}
